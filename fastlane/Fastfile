# fastlane_version '2.53.1'
fastlane_version '2.175.0'

package = load_json(json_path: "./package.json")
version = package['version']
build_number = android_get_version_code(
  gradle_file: "./android/app/build.gradle",
)

before_all do |lane|
end

desc 'Preparing and ensure git repository'
private_lane :ensure_git do
  ensure_git_branch
  ensure_git_status_clean
  git_pull
end

# desc 'Android: Increment versionCode and set versionName to package.json version.'
# private_lane :inc_ver_and do
#   increment_version_code(
#     gradle_file_path: "./android/app/build.gradle"
#   )

#   android_set_version_name(
#     gradle_file: "./android/app/build.gradle",
#     version_name: version
#   )
# end

# desc 'iOS: Increment build number and set the version to package.json version.'
# private_lane :inc_ver_ios do
#   increment_build_number(xcodeproj: './ios/CargoLinkMobile.xcodeproj')

#   increment_version_number(
#     xcodeproj: './ios/CargoLinkMobile.xcodeproj',
#     version_number: version
#   )
#   # version = get_version_number(xcodeproj: "./ios/CargoLinkMobile.xcodeproj", target: "CargoLinkMobile")
# end


desc 'Bump build numbers'
private_lane :bump_build do
  # ios
  increment_build_number(xcodeproj: './ios/CargoLinkMobile.xcodeproj')

  # android
  increment_version_code(
    gradle_file_path: "./android/app/build.gradle"
  )

  build_number = android_get_version_code(
    gradle_file: "./android/app/build.gradle",
  )

end

desc 'Bump version numbers, and set the version to match the pacakage.json version.'
lane :bump_version do
  # ensure_git
  # ios
  increment_version_number(
    xcodeproj: './ios/CargoLinkMobile.xcodeproj',
    version_number: version
  )

  # android
  android_set_version_name(
    gradle_file: "./android/app/build.gradle",
    version_name: version
  )

  # build_number = get_build_number(xcodeproj: "./ios/CargoLinkMobile.xcodeproj")  
  # tag_string = "v" + version + "(" + build_number + ")"
  # git_commit(path: ".", message: "build(bump): " + tag_string)
  # add_git_tag(tag: tag_string)
end

desc 'Distribute app to firebase'
lane :distribute do
  precheck
  bump_build
  cl = changelog
  sh "fastlane ios distribute"
  sh "fastlane android distribute"
  send_notify(changelog: cl)
end

desc 'Get change logs'
private_lane :generate_changelog do

  tag = last_git_tag()

  analyze_commits(
    match: tag,
    releases: { fix: "alpha", feat: "alpha"},
    commit_format: 'angular',
  )

  notes = conventional_changelog(
    format: 'plain', 
    # title: 'Changelog (build ' + build_number + ')', 
    display_title: false,
    display_links: false,
    order: ['feat', 'fix']
  )
end

lane :changelog do |options|
  if !options[:message]
    cl = generate_changelog
  else
    cl = options[:message]
  end

  display = "\n===========Changelog===========\n" + 
  cl + 
  "\n===============================\n"

  if !UI.confirm(display + "\nIs this correct changelog ?" )
    cl = prompt(
      text: "Input your Changelog : ",
      multi_line_end_keyword: "END"
    )
    cl = changelog(message: cl)
  end

  ios_release_notes = './metadata/ios/th/release_notes.txt'
  File.write(ios_release_notes, cl)

  android_release_notes = './metadata/android/en-GB/changelogs/' + build_number + '.txt'
  File.write(android_release_notes, cl)

  cl
end

desc 'Notify to related persons'
private_lane :send_notify do |options|
  cl = options[:changelog]
  message = "\nมีการอัพเดท Mobile Application\n\n🚀 v" + 
    version + " build " + build_number + "\n" + 
    cl + 
    "\n\n📨 แอ็พพลิเคชันได้ถูกส่งไปให้ผู้ทดสอบทุกท่านที่เกี่ยวข้องแล้ว\nกรุณาตรวจสอบ Email และเริ่มทำการทดสอบได้เลยครับ"
  UI.important(message)
  
  line_notify(
    access_token: ENV["LINE_TOKEN"],
    message: message
  )
end

platform :ios do

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
    match(app_identifier: 'th.co.cargolink.mobile', type: 'development', readonly: false)
    match(app_identifier: 'th.co.cargolink.mobile', type: 'appstore', readonly: false)
  end

  desc 'Build the iOS application.'
  private_lane :build do
    certificates
    build_app(
      workspace: "./ios/CargoLinkMobile.xcworkspace", 
      scheme: "CargoLinkMobile.production",
      # export_options: {
      #   method: "app-store",
      #   provisioningProfile: {
      #     "th.co.cargolink.mobile" => "match AppStore th.co.cargolink.mobile" 
      #   }
      # }
    )
  end

  desc 'Ship to Testflight.'
  lane :beta do
    ensure_git
    build
    # pilot
    deliver
    clean_build_artifacts
    push_to_git_remote
  end

  desc "Distribute app to firebase"
  lane :distribute do

    match(app_identifier: 'th.co.cargolink.mobile', type: 'adhoc', readonly: false)
    build_app(
      workspace: "./ios/CargoLinkMobile.xcworkspace", 
      scheme: "CargoLinkMobile.staging",
      export_options: {
        method: "ad-hoc",
        provisioningProfile: {
          "th.co.cargolink.mobile" => "match Development th.co.cargolink.mobile" 
        }
      }
    )

    firebase_app_distribution(
      app: "1:575219363673:ios:ec1599b72966cfe465a648",
      testers_file: "./fastlane/testers/ios.txt",
      release_notes_file: "./fastlane/metadata/ios/th/release_notes.txt"
    )
  end
  
  after_all do |lane|
    clean_build_artifacts
  end
end

platform :android do

  desc 'Build the Android application.'
  private_lane :build do
    gradle(task: 'clean', project_dir: 'android/')
    gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/')
  end

  desc 'Ship to Playstore Beta.'
  lane :beta do
    ensure_git
    build
    supply(track: 'beta', track_promote_to: 'beta')
    gradle(task: 'clean', project_dir: 'android/')
    push_to_git_remote
  end

  desc "Distribute app to firebase"
  lane :distribute do
    api_environment = "staging"
    if ENV["IS_PRODUCTION"] == "true"
      api_environment = "production"
    end
    ENV["ENVFILE"]=".env.#{api_environment}"

    puts "API_URL: #{ENV['API_URL']}"
    puts "IS_PRODUCTION: #{ENV['IS_PRODUCTION']}"
    puts "ENVFILE: #{ENV['ENVFILE']}"

    gradle(task: 'clean', project_dir: 'android/')
    gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/')

    firebase_app_distribution(
      app: "1:575219363673:android:fa1f26df874f84b865a648",
      testers_file: "./fastlane/testers/android.txt",
      release_notes_file: "./fastlane/metadata/android/en-GB/changelogs/" + build_number + ".txt"
    )
  end

  after_all do |lane|
  end
end

after_all do |lane|
end
