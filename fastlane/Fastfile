# fastlane_version '2.53.1'
fastlane_version '2.175.0'

package = load_json(json_path: "./package.json")
version = package['version']
build_number = nil

before_all do |lane|
  ignore_lanes = [:bump_version, :distribute, :send_notify, ]
  if !ignore_lanes.include?(lane)

  end
end

desc 'Preparing and ensure git repository'
lane :ensure_git do
  ensure_git_branch
  ensure_git_status_clean
  git_pull
end

desc 'Android: Increment versionCode and set versionName to package.json version.'
private_lane :inc_ver_and do
  increment_version_code(
    gradle_file_path: "./android/app/build.gradle"
  )

  android_set_version_name(
    gradle_file: "./android/app/build.gradle",
    version_name: version
  )
end

desc 'iOS: Increment build number and set the version to package.json version.'
private_lane :inc_ver_ios do
  increment_build_number(xcodeproj: './ios/CargoLinkMobile.xcodeproj')

  increment_version_number(
    xcodeproj: './ios/CargoLinkMobile.xcodeproj',
    version_number: version
  )
  # version = get_version_number(xcodeproj: "./ios/CargoLinkMobile.xcodeproj", target: "CargoLinkMobile")
end


desc 'Bump build numbers'
lane :bump_build do
  # ios
  increment_build_number(xcodeproj: './ios/CargoLinkMobile.xcodeproj')

  # android
  increment_version_code(
    gradle_file_path: "./android/app/build.gradle"
  )
end

desc 'Bump version numbers, and set the version to match the pacakage.json version.'
lane :bump_version do
  # ensure_git
  # ios
  increment_version_number(
    xcodeproj: './ios/CargoLinkMobile.xcodeproj',
    version_number: version
  )

  # android
  android_set_version_name(
    gradle_file: "./android/app/build.gradle",
    version_name: version
  )

  build_number = get_build_number(xcodeproj: "./ios/CargoLinkMobile.xcodeproj")  
  tag_string = "v" + version + "(" + build_number + ")"
  git_commit(path: ".", message: "build(bump): " + tag_string)
  # add_git_tag(tag: tag_string)
end

desc 'Distribute app to firebase'
lane :distribute do
  bump_build
  sh "fastlane ios distribute"
  sh "fastlane android distribute"
  send_notify
end

desc 'Get change logs'
lane :changelogs do
  # changelog = changelog_from_git_commits(
  #   between: ["v1.1.15", "HEAD"],  # Optional, lets you specify a revision/tag range between which to collect commit info
  #   pretty: "- %B",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text
  #   date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
  #   match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
  #   merge_commit_filtering: "exclude_merges" # Optional, lets you filter out merge commits
  # )
  isReleasable = analyze_commits(match: 'v1.1.15')
  # next_version = lane_context[SharedValues::RELEASE_IS_NEXT_VERSION_HIGHER]
  # UI.message(next_version)
  notes = conventional_changelog(
    format: 'plain', 
    title: 'Changelog', 
    display_links: false,
  )

  UI.message(notes)
end

desc 'Notify to related persons'
lane :send_notify do
  build_number = android_get_version_code(
    gradle_file: "./android/app/build.gradle",
  )
  line_notify(
    access_token: ENV["LINE_TOKEN"],
    message: "\nมีการอัพเดท Mobile Application\n\n🚀 v" + 
    version + " build " + build_number + "\n" + 
    output + 
    "\n📨 แอ็พพลิเคชันได้ถูกส่งไปให้ผู้ทดสอบทุกท่านที่เกี่ยวข้องแล้ว\nกรุณาตรวจสอบ Email และเริ่มทำการทดสอบได้เลยครับ",
  )
end

platform :ios do

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
    match(app_identifier: 'th.co.cargolink.mobile', type: 'development', readonly: false)
    match(app_identifier: 'th.co.cargolink.mobile', type: 'appstore', readonly: false)
  end

  desc 'Build the iOS application.'
  private_lane :build do
    certificates
    build_app(
      workspace: "./ios/CargoLinkMobile.xcworkspace", 
      scheme: "CargoLinkMobile.production",
      # export_options: {
      #   method: "app-store",
      #   provisioningProfile: {
      #     "th.co.cargolink.mobile" => "match AppStore th.co.cargolink.mobile" 
      #   }
      # }
    )
  end

  desc 'Ship to Testflight.'
  lane :beta do
    ensure_git
    build
    # pilot
    deliver
    clean_build_artifacts
    push_to_git_remote
  end

  desc "Distribute app to firebase"
  lane :distribute do

    match(app_identifier: 'th.co.cargolink.mobile', type: 'adhoc', readonly: false)
    build_app(
      workspace: "./ios/CargoLinkMobile.xcworkspace", 
      scheme: "CargoLinkMobile.staging",
      export_options: {
        method: "ad-hoc",
        provisioningProfile: {
          "th.co.cargolink.mobile" => "match Development th.co.cargolink.mobile" 
        }
      }
    )

    firebase_app_distribution(
      app: "1:575219363673:ios:ec1599b72966cfe465a648",
      testers_file: "./fastlane/testers/ios.txt",
      release_notes_file: "./fastlane/metadata/ios/th/release_notes.txt"
    )
  end
  
  after_all do |lane|
    clean_build_artifacts
  end
end

platform :android do

  desc 'Build the Android application.'
  private_lane :build do
    gradle(task: 'clean', project_dir: 'android/')
    gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/')
  end

  desc 'Ship to Playstore Beta.'
  lane :beta do
    ensure_git
    build
    supply(track: 'beta', track_promote_to: 'beta')
    gradle(task: 'clean', project_dir: 'android/')
    push_to_git_remote
  end

  desc "Distribute app to firebase"
  lane :distribute do
    api_environment = "staging"
    if ENV["IS_PRODUCTION"] == "true"
      api_environment = "production"
    end
    ENV["ENVFILE"]=".env.#{api_environment}"

    puts "API_URL: #{ENV['API_URL']}"
    puts "IS_PRODUCTION: #{ENV['IS_PRODUCTION']}"
    puts "ENVFILE: #{ENV['ENVFILE']}"

    gradle(task: 'clean', project_dir: 'android/')
    gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/')

    build_number = android_get_version_code(
      gradle_file: "./android/app/build.gradle",
    )

    firebase_app_distribution(
      app: "1:575219363673:android:fa1f26df874f84b865a648",
      testers_file: "./fastlane/testers/android.txt",
      release_notes_file: "./fastlane/metadata/android/en-GB/changelogs/" + build_number + ".txt"
    )
  end

  after_all do |lane|
  end
end

after_all do |lane|
  ignore_lanes = [:bump_version, :distribute, :send_notify]
  if !ignore_lanes.include?(lane)
    # push_to_git_remote
  end
end
