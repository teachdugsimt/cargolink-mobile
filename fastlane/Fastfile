# fastlane_version '2.53.1'
fastlane_version '2.175.0'

package = load_json(json_path: "./package.json")
version = package['version']
build_number = nil

before_all do |lane|
  ignore_lanes = [:bump_version]
  if !ignore_lanes.include?(lane)
    ensure_git_branch
    ensure_git_status_clean
    git_pull
  end
end

desc 'Android: Increment versionCode and set versionName to package.json version.'
private_lane :inc_ver_and do
  increment_version_code(
    gradle_file_path: "./android/app/build.gradle"
  )

  android_set_version_name(
    gradle_file: "./android/app/build.gradle",
    version_name: version
  )
end

desc 'iOS: Increment build number and set the version to package.json version.'
private_lane :inc_ver_ios do
  increment_build_number(xcodeproj: './ios/CargoLinkMobile.xcodeproj')

  increment_version_number(
    xcodeproj: './ios/CargoLinkMobile.xcodeproj',
    version_number: version
  )
  # version = get_version_number(xcodeproj: "./ios/CargoLinkMobile.xcodeproj", target: "CargoLinkMobile")
end


desc 'Bump build numbers, and set the version to match the pacakage.json version.'
lane :bump_version do
  inc_ver_ios
  inc_ver_and
  build_number = get_build_number(xcodeproj: "./ios/CargoLinkMobile.xcodeproj")  
  tag_string = "v" + version + "(" + build_number + ")"
  git_commit(path: ".", message: "build(bump): " + tag_string)
  # add_git_tag(tag: tag_string)
end

platform :ios do

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
    match(app_identifier: 'th.co.cargolink.mobile', type: 'development', readonly: true)
    match(app_identifier: 'th.co.cargolink.mobile', type: 'appstore', readonly: true)
  end

  desc 'Build the iOS application.'
  private_lane :build do
    certificates
    build_app(workspace: "./ios/CargoLinkMobile.xcworkspace", scheme: "CargoLinkMobile")
    # gym(scheme: 'CargoLinkMobile', project: './ios/CargoLinkMobile.xcodeproj')
  end

  desc 'Ship to Testflight.'
  lane :beta do
    build
    # pilot
    deliver
  end

  after_all do |lane|
    clean_build_artifacts
  end
end

platform :android do

  desc 'Build the Android application.'
  private_lane :build do
    gradle(task: 'clean', project_dir: 'android/')
    gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/')
  end

  desc 'Ship to Playstore Beta.'
  lane :beta do
    build
    supply(track: 'beta', track_promote_to: 'beta')
  end

  desc "Distribute app to firebase"
    lane :distribute do
      gradle(task: 'assemble', build_type: 'Debug', project_dir: 'android/')

      firebase_app_distribution(
        app: "1:575219363673:android:fa1f26df874f84b865a648",
        testers_file: "./fastlane/testers.txt",
        release_notes: "Fix something",
        firebase_cli_token: "4/1AY0e-g5yZw52WZreY-nw8IOUcvI086kdgjc7mLdZdcecUlvVCYpSre3PXNo"
      )
    end

  after_all do |lane|
  end
end

after_all do |lane|
  ignore_lanes = [:bump_version]
  if !ignore_lanes.include?(lane)
    push_to_git_remote
  end
end
